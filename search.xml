<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Shadowsocks 使用说明]]></title>
      <url>%2F2017%2F04%2F27%2FShadowsocks%20%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%2F</url>
      <content type="text"><![CDATA[一.概要一个帮你绕过防火墙的迅速的隧道代理.特性: TCP &amp; UDP support User management API TCP fast open Workers and graceful restart Destination IP blacklist 二.服务端I安装Debian / Ubuntu:12apt-get install python-pippip install shadowsocks CentOS:123yum install python-setuptools &amp;&amp; easy_install pippip install shadowsocksenter code here Windows:不推荐部署在Windows上，因为在Windows上的selectAPI非常有限。如果你想要为多个用户提供服务，请选择部署在LINUX上 1.下载并安装l Python for Windows, 在64位Windows操作系统中可以选择 x86-64 MSI 安装包 . 2.在这个过程中你需要安装 pip 安装 OpenSSL for Windows. 如果你安装了 64位 Python, 你应该选择64位 OpenSSL. 如在 Linux上安装,在命令提示符下,输入命令行 1pip install shadowsocks 5.如果你想用 salsa20 or chacha20 加密, 下载 libsodium 并将所有dll文件(不需要路径)放进 C:\Windows\System32 or C:\Windows\SysWOW64 (32bit Python on 64bit Windows). II使用1ssserver -p 443 -k password -m aes-256-cfb 后台运行:1sudo ssserver -p 443 -k password -m aes-256-cfb --user nobody -d start 停止:1sudo ssserver -d stop 检查日志:1sudo less /var/log/shadowsocks.log 用 -h 查看所有参数II以配置文件使用(建议)创造配置文件并运行 创造配置文件 /etc/shadowsocks.json单用户模板12345678910&#123; &quot;server&quot;:&quot;my_server_ip&quot;, &quot;server_port&quot;:8388, &quot;local_address&quot;: &quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;password&quot;:&quot;mypassword&quot;, &quot;timeout&quot;:300, &quot;method&quot;:&quot;aes-256-cfb&quot;, &quot;fast_open&quot;: false&#125; 多个用户模板12345678910111213&#123;&quot;server&quot;:&quot;my_server_ip&quot;,&quot;port_password&quot;:&#123; &quot;8381&quot;:&quot;password1&quot;, &quot;8382&quot;:&quot;password2&quot;, &quot;8383&quot;:&quot;password3&quot;, &quot;8384&quot;:&quot;password4&quot; &#125;,&quot;timeout&quot;:300&quot;method&quot;:&quot;aes-256-cfb&quot;,&quot;fast_open&quot;:false,&quot;workers&quot;:1&#125; 各个字段的解释: Name Explanation server 监听的主机地址 server_port 服务端口 local_address 监听的本地地址 local_port 本地端口 password 密码(提供给加密) timeout 超时 method 加密方式，预置: “aes-256-cfb”，见III加密格式 fast_open 使用TCP_FASTOPEN, true /false workers number of workers, available on Unix/Linux 前台运行1ssserver -c /etc/shadowsocks.json 后台运行12ssserver -c /etc/shadowsocks.json -d startssserver -c /etc/shadowsocks.json -d stop 开始服务:1ssserver -c /etc/shadowsocks.json III加密格式支持的密码类 Python libev Go Qt SSL library (AES, etc) Y Y Y Y RC4-MD5 Y Y Y Y Salsa20, Chacha20 Y Y Y Y M2Crypto使用M2Crypto会稍微加快加密过程Debian:1apt-get install python-m2crypto CentOS:1yum install m2crypto rc4-md5rc4-md5 是安全，快速的使用不同的值链接加密方式. 推荐在 OpenWRT路由器上使用. salsa20 and chacha20salsa20 and chacha20 同是快速的序列密码. 在x86_64系统上最优部署的salsa20 甚至能获得比r4快两倍的速度 (尽管ARM运行较慢).安装 libsodium &gt;= 1.0.0 如果你想要使用它们.123456sudo apt-get install build-essentialwget https://github.com/jedisct1/libsodium/releases/download/1.0.8/libsodium-1.0.8.tar.gztar xf libsodium-1.0.8.tar.gz &amp;&amp; cd libsodium-1.0.8./configure &amp;&amp; make -j2sudo make installsudo ldconfig 弃用的密码这些旧的密码是慢的或者不安全的，不要使用它们: rc4 des-cfb table salsa20-ctr IV其他 fast_open如果你的伺服器和客户程序都部署在 Linux 3.7.1 或者更高版本,你可以打开 fast_open 以获得更低延迟. 首先你在的配置文件 config.json将设置fast_open为 true 然后在你的OS上暂时打开fast open：1echo 3 &gt; /proc/sys/net/ipv4/tcp_fastopen 要永久打开fast open, 见 Optimizing Shadowsocks.注意: 只有一些版本支持这个特性. Here’s the page answering questions: does A support B?Servers Python libev Go Fast Open Y Y N Multiple Users Y Y Y Management API Y Y N Workers Y N N Graceful Restart Y N N ss-redir N Y N ss-tunnel N Y N UDP Relay Y Y N OTA Y Y Y Clients Windows ShadowsocksX Qt5 Android iOS App Store iOS Cydia System Proxy Y Y N Y N Y CHNRoutes Y Y N Y Y Y PAC Configuration Y Y N N N N Profile Switching Y Y Y Y N Y QR Code Scan Y Y Y Y Y Y QR Code Generation Y Y Y Y N Y Optimizing Shadowsocks如果你在日志中看到大量error: too many open files, 你应该优化你的系统. 这个引导应用到所有shadowsocks 服务器 (Python, libev, etc). 在 Debian 7新建 /etc/sysctl.d/local.conf 并包含以下内容:123456789101112131415161718192021222324252627282930313233343536373839404142434445# max open filesfs.file-max = 51200# max read buffernet.core.rmem_max = 67108864# max write buffernet.core.wmem_max = 67108864# default read buffernet.core.rmem_default = 65536# default write buffernet.core.wmem_default = 65536# max processor input queuenet.core.netdev_max_backlog = 4096# max backlognet.core.somaxconn = 4096# resist SYN flood attacksnet.ipv4.tcp_syncookies = 1# reuse timewait sockets when safenet.ipv4.tcp_tw_reuse = 1# turn off fast timewait sockets recyclingnet.ipv4.tcp_tw_recycle = 0# short FIN timeoutnet.ipv4.tcp_fin_timeout = 30# short keepalive timenet.ipv4.tcp_keepalive_time = 1200# outbound port rangenet.ipv4.ip_local_port_range = 10000 65000# max SYN backlognet.ipv4.tcp_max_syn_backlog = 4096# max timewait sockets held by system simultaneouslynet.ipv4.tcp_max_tw_buckets = 5000# turn on TCP Fast Open on both client and server sidenet.ipv4.tcp_fastopen = 3# TCP receive buffernet.ipv4.tcp_rmem = 4096 87380 67108864# TCP write buffernet.ipv4.tcp_wmem = 4096 65536 67108864# turn on path MTU discoverynet.ipv4.tcp_mtu_probing = 1# for high-latency networknet.ipv4.tcp_congestion_control = hybla# for low-latency network, use cubic instead# net.ipv4.tcp_congestion_control = cubic 然后1sysctl --system 对于旧的操作系统：1sysctl -p /etc/sysctl.d/local.conf 注意: 不要启用 net.ipv4.tcp_tw_recycle!!! 见 这个文章.如果你使用 Supervisor, 确保你在/etc/default/supervisor有如下行 . 一旦你添加了这一行, 重启 Supervisor (service stop supervisor &amp;&amp; service start supervisor).1ulimit -n 51200 如果你用其他方式在后台运行 shadowsocks , 确保你在init 脚本添加了 ulimit -n 51200 .优化后，一个执行千计连接的繁忙的Shadowsocks服务器 占用大概30MB 内存 和 10% CPU. 请注意在同样的情况下Linux kernel 经常使用 &gt;100MB RAM 去处理 buffer 和 cache. 在使用了上述的 sysct 设置, 你用RAM换取了速度. 如果你想要使用更少的RAM，减少 rmem 和 wmem 的大小. V文档你可以在 Wiki.上找到所有原版文档 开源许可证Copyright 2015 clowwindyLicensed under the Apache License; you may not use this file except in compliance with the License. You may obtain a copy of the License atUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an “AS IS” BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[自建的DNS服务器，支持番羽土啬挂油管]]></title>
      <url>%2F2017%2F04%2F26%2F%E8%87%AA%E5%BB%BA%E7%9A%84DNS%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E6%94%AF%E6%8C%81%E7%95%AA%E7%BE%BD%E5%9C%9F%E5%95%AC%E6%8C%82%E6%B2%B9%E7%AE%A1%2F</url>
      <content type="text"><![CDATA[139.199.156.181请勿攻击服务器]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[一些实用的在线站点]]></title>
      <url>%2F2017%2F04%2F20%2F%E4%B8%80%E4%BA%9B%E5%AE%9E%E7%94%A8%E7%9A%84%E5%9C%A8%E7%BA%BF%E7%AB%99%E7%82%B9%2F</url>
      <content type="text"><![CDATA[在线文档 在线FTP盘 文件管理(备用) 云文件外链 图片外链程序(备用) 图片收集站点(备用) 在线书签]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[按位取反运算符 (~) 到底应该怎样计算？]]></title>
      <url>%2F2017%2F04%2F20%2F%E6%8C%89%E4%BD%8D%E5%8F%96%E5%8F%8D%E8%BF%90%E7%AE%97%E7%AC%A6-%E5%88%B0%E5%BA%95%E5%BA%94%E8%AF%A5%E6%80%8E%E6%A0%B7%E8%AE%A1%E7%AE%97%EF%BC%9F%2F</url>
      <content type="text"><![CDATA[二进制数在内存中以补码的形式存储。 按位取反：二进制每一位取反，0 变 1，1 变 0。123456789~9 的计算步骤：转二进制：0 1001计算补码：0 1001按位取反：1 0110_____转为原码：按位取反：1 1001 末位加一：1 1010符号位为 1 是负数，即 - 10 1234567~-9 的计算步骤：转二进制：1 1001计算补码：1 0111按位取反：0 1000_____转为原码：正数的补码和原码相同，仍为：0 1000，即 8 原码表示法在数值前面增加了一位符号位（即最高位为符号位）：正数该位为 0，负数该位为 1（0 有两种表示：+0 和 - 0），其余位表示数值的大小。例如，用 8 位二进制表示一个数，+11 的原码为 00001011，-11 的原码就是 10001011。反码表示法规定：正数的反码与其原码相同；负数的反码是对其原码逐位取反，但符号位除外。补码表示法规定：正数的补码与其原码相同；负数的补码是在其反码的末位加 1。 （1） 原码：在数值前直接加一符号位的表示法。[+7] 原 = 0 0000111 B[-7] 原 = 1 0000111 B注意：a. 数 0 的原码有两种形式：[+0] 原 = 0 0000000 B[-0] 原 = 1 0000000 Bb. 8 位二进制原码的表示范围：-127～+127 （2）反码：正数：正数的反码与原码相同。负数：负数的反码，符号位为 “1”，数值部分按位取反。[+7] 反 = 0 0000111 B[-7] 反 = 1 1111000 B注意：a. 数 0 的反码也有两种形式，即[+0] 反 = 0 0000000 B[-0] 反 = 1 1111111 Bb. 8 位二进制反码的表示范围：-127～+127 （3）补码正数：正数的补码和原码相同。负数：负数的补码则是符号位为 “1”。并且，这个“1” 既是符号位，也是数值位。数值部分按位取反后再在末位（最低位）加 1。也就是“反码 + 1”。求负整数的补码，原码符号位不变，先将原码减去 1，最后数值各位取反。（但由于 2 进制的特殊性，通常先使数值位各位取反，最后整个数加 1。） 例如： 符号位 数值位[+7] 补 = 0 0000111 B[-7] 补 = 1 1111001 B注意：a. 采用补码后，可以方便地将减法运算转化成加法运算，运算过程得到简化。正数的补码即是它所表示的数的真值，而负数的补码的数值部份却不是它所表示的数的真值。采用补码进行运算，所得结果仍为补码。b. 与原码、反码不同，数值 0 的补码只有一个，即 [0] 补 = 00000000B。c. 若字长为 8 位，则补码所表示的范围为 - 128～+127；进行补码运算时，应注意所得结果不应超过补码所能表示数的范围。 转化为原码 已知一个数的补码，求原码的操作其实就是对该补码再求补码：⑴如果补码的符号位为 “0”，表示是一个正数，其原码就是补码。⑵如果补码的符号位为 “1”，表示是一个负数，那么求给定的这个补码的补码就是要求的原码。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[C 语言中 %d,%o,%f,%e,%x 的意义]]></title>
      <url>%2F2017%2F04%2F20%2FC-%E8%AF%AD%E8%A8%80%E4%B8%AD-d-o-f-e-x-%E7%9A%84%E6%84%8F%E4%B9%89%2F</url>
      <content type="text"><![CDATA[C-语言中-d-o-f-e-x-的意义 格式说明由 &ldquo;％&rdquo; 和格式字符组成，如％d％f 等。它的作用是将输出的数据转换为指定的格式输出。格式说明总是由 &ldquo;％&rdquo; 字符开始的。不同类型的数据用不同的格式字符。&nbsp;格式字符有 d,o,x,u,c,s,f,e,g 等。&nbsp;如 ％d 整型输出，％ld 长整型输出，％o 以八进制数形式输出整数，％x 以十六进制数形式输出整数，％u 以十进制数输出 unsigned 型数据 (无符号数)。％c 用来输出一个字符，％s 用来输出一个字符串，％f 用来输出实数，以小数形式输出，％e 以指数形式输出实数，％g 根据大小自动选 f 格式或 e 格式，且不输出无意义的零。scanf(控制字符，地址列表)格式字符的含义同 printf 函数，地址列表是由若干个地址组成的表列，可以是变量的地址，或字符串的首地址。如 scanf(&quot;％d％c％s&quot;,&amp;a,&amp;b,str)；]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[《Deep-Learning》（深度学习）中文版开放下载]]></title>
      <url>%2F2017%2F04%2F20%2F%E3%80%8ADeep-Learning%E3%80%8B%EF%BC%88%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%EF%BC%89%E4%B8%AD%E6%96%87%E7%89%88%E5%BC%80%E6%94%BE%E4%B8%8B%E8%BD%BD%2F</url>
      <content type="text"><![CDATA[《Deep Learning》（深度学习）中文版开放下载 《Deep Learning》（深度学习）是一本皆在帮助学生和从业人员进入机器学习领域的教科书，以开源的形式免费在网络上提供，这本书是由学界领军人物&nbsp;Ian Goodfellow、Yoshua Bengio&nbsp;和&nbsp;Aaron Courville&nbsp;合力打造。@Appinn 来自机器之心的消息。 这本书的主题具体来说，是机器学习的一种，一种能够使计算机系统从经验和数据中得到提高的技术。深度学习是一种特定类型的机器学习，具有强大的能力和灵活性，它将大千世界表示为嵌套的层次概念体系（由较简单概念间的联系定义复杂概念、从一般抽象概括到高级抽象表示）。对于本书的结构，第一部分介绍基本的数学工具和机器学习的概念，第二部分介绍最成熟的深度学习算法，而第三部分讨论某些具有展望性的想法，它们被广泛地认为是深度学习未来的研究重点。 因此，本书从基础数学知识到各类深度方法全面而又深入地描述了深度学习的各个主题。译者们也相信开源此书 PDF 版的中文译文可以促进大家对深度学习的基础和前沿知识有进一步的理解，也相信通过开放高质量的专业书籍能做到先阅读后付费。 Deep Learning 中文版在&nbsp;Github 开源，你可以直接前往阅读、下载，译者建议「读者可以以中文版为主、英文版为辅来阅读学习」。 更多细节请前往 Github，另外译者们依旧需要反馈意见，你可以在 Github 提交 issue，PDF 下载地址在这里（百度盘地址），在线阅读在这里。 注意由于版权问题，在线版本不提供图片。 &nbsp; &nbsp; &nbsp; &nbsp;]]></content>
    </entry>

    
  
  
</search>
