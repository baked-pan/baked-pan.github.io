<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[一些实用的在线站点]]></title>
      <url>%2F2017%2F04%2F20%2F%E4%B8%80%E4%BA%9B%E5%AE%9E%E7%94%A8%E7%9A%84%E5%9C%A8%E7%BA%BF%E7%AB%99%E7%82%B9%2F</url>
      <content type="text"><![CDATA[在线文档 在线FTP盘 文件管理(备用) 云文件外链 图片外链程序(备用) 图片收集站点(备用) 在线书签]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[按位取反运算符 (~) 到底应该怎样计算？]]></title>
      <url>%2F2017%2F04%2F20%2F%E6%8C%89%E4%BD%8D%E5%8F%96%E5%8F%8D%E8%BF%90%E7%AE%97%E7%AC%A6-%E5%88%B0%E5%BA%95%E5%BA%94%E8%AF%A5%E6%80%8E%E6%A0%B7%E8%AE%A1%E7%AE%97%EF%BC%9F%2F</url>
      <content type="text"><![CDATA[二进制数在内存中以补码的形式存储。 按位取反：二进制每一位取反，0 变 1，1 变 0。123456789~9 的计算步骤：转二进制：0 1001计算补码：0 1001按位取反：1 0110_____转为原码：按位取反：1 1001 末位加一：1 1010符号位为 1 是负数，即 - 10 1234567~-9 的计算步骤：转二进制：1 1001计算补码：1 0111按位取反：0 1000_____转为原码：正数的补码和原码相同，仍为：0 1000，即 8 原码表示法在数值前面增加了一位符号位（即最高位为符号位）：正数该位为 0，负数该位为 1（0 有两种表示：+0 和 - 0），其余位表示数值的大小。例如，用 8 位二进制表示一个数，+11 的原码为 00001011，-11 的原码就是 10001011。反码表示法规定：正数的反码与其原码相同；负数的反码是对其原码逐位取反，但符号位除外。补码表示法规定：正数的补码与其原码相同；负数的补码是在其反码的末位加 1。 （1） 原码：在数值前直接加一符号位的表示法。[+7] 原 = 0 0000111 B[-7] 原 = 1 0000111 B注意：a. 数 0 的原码有两种形式：[+0] 原 = 0 0000000 B[-0] 原 = 1 0000000 Bb. 8 位二进制原码的表示范围：-127～+127 （2）反码：正数：正数的反码与原码相同。负数：负数的反码，符号位为 “1”，数值部分按位取反。[+7] 反 = 0 0000111 B[-7] 反 = 1 1111000 B注意：a. 数 0 的反码也有两种形式，即[+0] 反 = 0 0000000 B[-0] 反 = 1 1111111 Bb. 8 位二进制反码的表示范围：-127～+127 （3）补码正数：正数的补码和原码相同。负数：负数的补码则是符号位为 “1”。并且，这个“1” 既是符号位，也是数值位。数值部分按位取反后再在末位（最低位）加 1。也就是“反码 + 1”。求负整数的补码，原码符号位不变，先将原码减去 1，最后数值各位取反。（但由于 2 进制的特殊性，通常先使数值位各位取反，最后整个数加 1。） 例如： 符号位 数值位[+7] 补 = 0 0000111 B[-7] 补 = 1 1111001 B注意：a. 采用补码后，可以方便地将减法运算转化成加法运算，运算过程得到简化。正数的补码即是它所表示的数的真值，而负数的补码的数值部份却不是它所表示的数的真值。采用补码进行运算，所得结果仍为补码。b. 与原码、反码不同，数值 0 的补码只有一个，即 [0] 补 = 00000000B。c. 若字长为 8 位，则补码所表示的范围为 - 128～+127；进行补码运算时，应注意所得结果不应超过补码所能表示数的范围。 转化为原码 已知一个数的补码，求原码的操作其实就是对该补码再求补码：⑴如果补码的符号位为 “0”，表示是一个正数，其原码就是补码。⑵如果补码的符号位为 “1”，表示是一个负数，那么求给定的这个补码的补码就是要求的原码。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[C 语言中 %d,%o,%f,%e,%x 的意义]]></title>
      <url>%2F2017%2F04%2F20%2FC-%E8%AF%AD%E8%A8%80%E4%B8%AD-d-o-f-e-x-%E7%9A%84%E6%84%8F%E4%B9%89%2F</url>
      <content type="text"><![CDATA[C-语言中-d-o-f-e-x-的意义 格式说明由 &ldquo;％&rdquo; 和格式字符组成，如％d％f 等。它的作用是将输出的数据转换为指定的格式输出。格式说明总是由 &ldquo;％&rdquo; 字符开始的。不同类型的数据用不同的格式字符。&nbsp;格式字符有 d,o,x,u,c,s,f,e,g 等。&nbsp;如 ％d 整型输出，％ld 长整型输出，％o 以八进制数形式输出整数，％x 以十六进制数形式输出整数，％u 以十进制数输出 unsigned 型数据 (无符号数)。％c 用来输出一个字符，％s 用来输出一个字符串，％f 用来输出实数，以小数形式输出，％e 以指数形式输出实数，％g 根据大小自动选 f 格式或 e 格式，且不输出无意义的零。scanf(控制字符，地址列表)格式字符的含义同 printf 函数，地址列表是由若干个地址组成的表列，可以是变量的地址，或字符串的首地址。如 scanf(&quot;％d％c％s&quot;,&amp;a,&amp;b,str)；]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[《Deep-Learning》（深度学习）中文版开放下载]]></title>
      <url>%2F2017%2F04%2F20%2F%E3%80%8ADeep-Learning%E3%80%8B%EF%BC%88%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%EF%BC%89%E4%B8%AD%E6%96%87%E7%89%88%E5%BC%80%E6%94%BE%E4%B8%8B%E8%BD%BD%2F</url>
      <content type="text"><![CDATA[《Deep Learning》（深度学习）中文版开放下载 《Deep Learning》（深度学习）是一本皆在帮助学生和从业人员进入机器学习领域的教科书，以开源的形式免费在网络上提供，这本书是由学界领军人物&nbsp;Ian Goodfellow、Yoshua Bengio&nbsp;和&nbsp;Aaron Courville&nbsp;合力打造。@Appinn 来自机器之心的消息。 这本书的主题具体来说，是机器学习的一种，一种能够使计算机系统从经验和数据中得到提高的技术。深度学习是一种特定类型的机器学习，具有强大的能力和灵活性，它将大千世界表示为嵌套的层次概念体系（由较简单概念间的联系定义复杂概念、从一般抽象概括到高级抽象表示）。对于本书的结构，第一部分介绍基本的数学工具和机器学习的概念，第二部分介绍最成熟的深度学习算法，而第三部分讨论某些具有展望性的想法，它们被广泛地认为是深度学习未来的研究重点。 因此，本书从基础数学知识到各类深度方法全面而又深入地描述了深度学习的各个主题。译者们也相信开源此书 PDF 版的中文译文可以促进大家对深度学习的基础和前沿知识有进一步的理解，也相信通过开放高质量的专业书籍能做到先阅读后付费。 Deep Learning 中文版在&nbsp;Github 开源，你可以直接前往阅读、下载，译者建议「读者可以以中文版为主、英文版为辅来阅读学习」。 更多细节请前往 Github，另外译者们依旧需要反馈意见，你可以在 Github 提交 issue，PDF 下载地址在这里（百度盘地址），在线阅读在这里。 注意由于版权问题，在线版本不提供图片。 &nbsp; &nbsp; &nbsp; &nbsp;]]></content>
    </entry>

    
  
  
</search>
